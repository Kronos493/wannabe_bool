= Wannabe Bool

If <b>string</b>, <b>integer</b>, <b>symbol</b> and <b>nil</b> values wanna be a <b>boolean</b> value, they can with the new <code>to_b</code> method.
Moreover, you can use <code>WannabeBool::Attributes</code> module to create predicate methods in your classes.

{<img src="https://badge.fury.io/rb/wannabe_bool.png" alt="Gem Version" />}[http://badge.fury.io/rb/wannabe_bool]
{<img src="https://travis-ci.org/prodis/wannabe_bool.svg?branch=master" alt="Build Status" />}[https://travis-ci.org/prodis/wannabe_bool]
{<img src="https://coveralls.io/repos/prodis/wannabe_bool/badge.png" alt="Coverage Status" />}[https://coveralls.io/r/prodis/wannabe_bool]
{<img src="https://codeclimate.com/github/prodis/wannabe_bool/badges/gpa.svg" alt="Code Climate" />}[https://codeclimate.com/github/prodis/wannabe_bool]


== Installing

=== Gemfile
  gem 'wannabe_bool'

=== Direct installation
  $ gem install wannabe_bool


== Using

<code>to_b</code> method is available on <code>String</code>, <code>Symbol</code>, <code>Integer</code>, <code>TrueClass</code>, <code>FalseClass</code> and <code>NilClass</code>.

  require 'wannabe_bool'

==== String
  '1'.to_b        # => true
  't'.to_b        # => true
  'T'.to_b        # => true
  'true'.to_b     # => true
  'TRUE'.to_b     # => true
  'on'.to_b       # => true
  'ON'.to_b       # => true
  'y'.to_b        # => true
  'yes'.to_b      # => true
  'YES'.to_b      # => true

  ' 1 '.to_b      # => true
  ' t '.to_b      # => true
  ' T '.to_b      # => true
  ' true '.to_b   # => true
  ' TRUE '.to_b   # => true
  ' on '.to_b     # => true
  ' ON '.to_b     # => true
  ' y '.to_b      # => true
  'Y'.to_b        # => true
  ' Y '.to_b      # => true
  ' yes '.to_b    # => true
  ' YES '.to_b    # => true

  ''.to_b         # => false
  '0'.to_b        # => false
  '2'.to_b        # => false
  'f'.to_b        # => false
  'F'.to_b        # => false
  'false'.to_b    # => false
  'FALSE'.to_b    # => false
  'off'.to_b      # => false
  'OFF'.to_b      # => false
  'n'.to_b        # => false
  'N'.to_b        # => false
  'no'.to_b       # => false
  'NO'.to_b       # => false
  'not'.to_b      # => false
  'NOT'.to_b      # => false
  'wherever'.to_b # => false

==== Symbol
  :1.to_b        # => true
  :t.to_b        # => true
  :T.to_b        # => true
  :true.to_b     # => true
  :TRUE.to_b     # => true
  :on.to_b       # => true
  :ON.to_b       # => true
  :y.to_b        # => true
  :Y.to_b        # => true
  :yes.to_b      # => true
  :YES.to_b      # => true

  :f.to_b        # => false
  :F.to_b        # => false
  :false.to_b    # => false
  :FALSE.to_b    # => false
  :off.to_b      # => false
  :OFF.to_b      # => false
  :n.to_b        # => false
  :N.to_b        # => false
  :no.to_b       # => false
  :NO.to_b       # => false
  :not.to_b      # => false
  :NOT.to_b      # => false
  :wherever.to_b # => false

==== Integer
  1.to_b # => true

  0.to_b # => false
  2.to_b # => false

==== TrueClass
  true.to_b # => true

==== FalseClass
  false.to_b # => false

==== NilClass
  nil.to_b # => false

Creating predicate methods:

  class Fake
    include WannabeBool::Attributes

    attr_accessor :name, :main, :published
    attr_wannabe_bool :main, :published
  end

  fake = Fake.new
  fake.main?      # => false
  fake.published? # => false

  fake.main = true
  fake.main? # => true

  fake.published = 1
  fake.published? # => true

  fake.main = 'true'
  fake.main? # => true

  fake.published = :true
  fake.published? # => true


== Author
- {Fernando Hamasaki de Amorim (prodis)}[http://prodis.blog.br]


== Contributing to <b>wannabe_bool</b>

* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet.
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it.
* Fork the project.
* Start a feature/bugfix branch.
* Commit and push until you are happy with your contribution.
* Don't forget to rebase with branch master in main project before submit the pull request.
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.


== Copyright

(The MIT License)

{Prodis a.k.a. Fernando Hamasaki de Amorim}[http://prodis.blog.br]

http://prodis.net.br/images/prodis_150.gif

Copyright (c) 2014-2015 Prodis

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

